/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all jobs.
         * @description Returns all jobs.
         */
        get: operations["list_jobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/klines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all klines per ticker.
         * @description Returns all klines for give ticker.
         */
        get: operations["list_klines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all logs
         * @description Default 100 records.
         */
        get: operations["list_logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all signals.
         * @description Returns all signals.
         */
        get: operations["list_signals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signals-us": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all signals for US stocks.
         * @description Returns all signals.
         */
        get: operations["list_signals_us"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all stocks.
         * @description Returns all stocks.
         */
        get: operations["list_stocks"];
        put?: never;
        /**
         * Create stocks with meta,klines,signals.
         * @description Returns a 200 if the job is submitted.
         */
        post: operations["create_stocks"];
        /** Delete stock. */
        delete: operations["delete_stock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trigger/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trigger update of all.
         * @description Returns.
         */
        get: operations["update_all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiError: {
            DatabaseError: string;
        } | {
            NotFound: string;
        } | {
            MissingInput: string;
        } | {
            Unauthorized: string;
        } | {
            RunnerError: string;
        };
        CreateStockRequest: {
            tickers: string;
        };
        Job: {
            created_at: string;
            error_message?: string | null;
            /** Format: int64 */
            id: number;
            job_status: components["schemas"]["JobStatus"];
            job_type: components["schemas"]["JobType"];
            payload: unknown;
            updated_at: string;
        };
        /** @enum {string} */
        JobStatus: "Pending" | "Running" | "Done" | "Error";
        /** @enum {string} */
        JobType: "CreateStock" | "DeleteStock" | "CrawlPrice" | "ComputeSignal";
        Kline: {
            /** Format: double */
            k_close: number;
            /** Format: int64 */
            k_date: number;
            /** Format: double */
            k_high: number;
            /** Format: double */
            k_low: number;
            /** Format: double */
            k_open: number;
            k_ticker: string;
            /** Format: double */
            k_value: number;
            /** Format: double */
            k_volume: number;
        };
        LogEntry: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            log_level: number;
            /** Format: int64 */
            log_line: number;
            log_message: string;
            log_target: string;
            log_timestamp: string;
        };
        Signal: {
            /** Format: double */
            kdj_d: number;
            /** Format: double */
            kdj_k: number;
            ticker: string;
        };
        Stock: {
            /** Format: double */
            debt?: number | null;
            /** Format: double */
            margin?: number | null;
            /** Format: int64 */
            market: number;
            /** Format: double */
            net?: number | null;
            /** Format: double */
            pb?: number | null;
            /** Format: double */
            pe?: number | null;
            realname: string;
            /** Format: double */
            revenue?: number | null;
            ticker: string;
            /** Format: double */
            total_cap?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_jobs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all jobs from jobs table. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"][];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    list_klines: {
        parameters: {
            query: {
                ticker: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all klines for the ticker */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Kline"][];
                };
            };
            /** @description Ticker is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    list_logs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all logs from logs table. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogEntry"][];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    list_signals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all signals from signals table. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Signal"][];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    list_signals_us: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all signals from signals table. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Signal"][];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    list_stocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all stocks from stocks table. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stock"][];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    create_stocks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStockRequest"];
            };
        };
        responses: {
            /** @description Job submitted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tickers is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Job runner error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    delete_stock: {
        parameters: {
            query: {
                ticker: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete stock and its records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ticker is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    update_all: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trigger is init. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Database error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
}
